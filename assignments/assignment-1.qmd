---
title: "Assignment 1"
---

My first assignment has two parts.

## (a) summary of the video

In part A, I watched the video "[Veri Bilimi ve Endüstri Mühendisliği Üzerine Sohbetler - Baykal Hafızoğlu & Erdi Daşdemir](https://www.youtube.com/watch?v=tV_0pHSdLAM)" and extracted the brief summary. I have listed the conclusions I made below:

-   The world of Operational Research / Analytics can be examined under 4 basic categories. These are:

1.  **Descriptive Analytics**: It covers defining data and understanding the details thoroughly. It is the easiest category in terms of complexity but low in terms of value. Data mining, time series analysis, data visualization are among the methods used.

2.  **Diagnostic Analytics**: It aims to diagnose problems. Hypothesis testing, clustering, regression are among the methods used.

3.  **Predictive Analytics**: It aims to predict what will happen in the future. Simulation, clustering, regression, machine learning are among the methods used.

4.  **Prescriptive Analytics**: It aims to make action suggestions. Although it is the category with the highest complexity, its value is also high. Optimization, heuristics, math modeling are among the methods used.

-   Analytical solutions can be divided into **Operational** (several times a day), **Tactical** (once or twice a month), **Strategical** (once in a few years) according to their frequency of use.

-   All projects should start with a clear and concise problem definition. At this stage, KPIs, success criteria should be determined and descriptive analyses should be performed.

-   The model produced at the model deployment stage should be suitable for the user and the sector. It should be applicable in real life and easy to use. The platform used and early prototyping are critical. Communication with the end user and the user interface are of critical importance. Even if the model is developed correctly, if it does not meet the user's requests, the model will not work.

-   At the last stage, it should be stated how much the KPIs specified at the beginning were developed using this model. In addition, it is always better for the solution to be easily explained compared to complex models.

Afterwards, I prepared two questions about this video, one open-ended and one multiple-choice:

1.  What is the most critical concept in the model deployment process?

    **Answer:** The user interface is the most important element at this stage. The model must fully comply with the end user's requests and needs so that the user can adapt to the model.

2.  Which of the following is not one of the categories in which we classify analytical solutions based on frequency of use?

<!-- -->

A)  Tactical

B)  Operational

C)  Strategical

D)  Executional

**Answer:** D

## (b) poll_us_election_2016 dataset

In part b, I completed the tasks given on the dataset named "poll_us_election_2016".

-   First, I imported the dataset named polls_us_election_2016 in the dslabs package and wanted to see its general content.

```{r}
# importing the dataset 

library(dslabs)

data(polls_us_election_2016)

# general structre of the dataset

str(polls_us_election_2016)
```

As seen here, the data set contains 15 variables/columns and 4208 rows. The columns contain numeric, character and factor data types.

-   Then I displayed the first 10 lines.

```{r}
# displaying the first 10 rows 

(polls_us_election_2016[1:10,])
```

-   Then I found the total number of NA values ​​in the entire dataset.

```{r}
# calculating the total number of NA values 

sum(is.na(polls_us_election_2016))
```

-   Then I assigned it as a new variable to preserve the original dataset. I continued my subsequent work on this dataset, which I named new_data.

```{r}
new_data <- polls_us_election_2016
```

-   Then I found which columns in this data set were numeric, which were character, and which were factor. I assigned the relevant indexes of each as variables.

```{r}
# assigning indexes to variables according to data types

numeric_columns <- which(sapply(new_data, is.numeric))

character_columns <- which(sapply(new_data, is.character))

factor_columns <- which(sapply(new_data, is.factor))

print(c("numeric: ", numeric_columns ,"character: ", character_columns, "Factor: ", factor_columns))
```

-   Then, I replaced the NA values ​​in the columns with numeric data type with my birth year, 2002. I replaced the NA values ​​in the columns with data types character and factor with my name Bilge. In order to make changes to the factor type, I first had to change its type to character. After assigning the Bilge name, I changed the data type back to factor.

```{r}
# replacing NA values in numeric columns with 2002

for (i in numeric_columns) {
  
  new_data[is.na(new_data[, i]), i] <- 2002
  
}

# replacing NA values in character columns with Bilge

for (i in character_columns) {
  
  new_data[is.na(new_data[, i]), i] <- "Bilge"
  
}

# replacing NA values in factor columns with Bilge

for (i in factor_columns) {
  
  new_data[, i] <- as.character(new_data[, i])  
  new_data[is.na(new_data[, i]), i] <- "Bilge"
  new_data[, i] <- as.factor(new_data[, i]) 
}
```

-   Then I displayed the first 10 rows of this newly created dataset.

```{r}
# displaying first 10 row

new_data[1:10,]
```

-   Finally, I calculated how many NA values ​​were in the newly created dataset.

```{r}
# calculating the total number of NA values

sum(is.na(new_data))
```

I used AI in 2 different places in this assignment.

-   First, I wrote the following prompt to ChatGPT to find out which columns are numeric:

If the data type of the columns is numeric, I want to assign the indexes of those columns to a variable called numeric_columns and the answer is:

```{r}
numeric_columns <- which(sapply(new_data, is.numeric))
```

I also applied this structure for character and factor ones.

-   Secondly, I could not change the NA values ​​in the factor data type. I asked ChatGPT for help on this issue:

I get an error when changing the values ​​in the factor data type. How can I solve this? According to answer, I should first convert it to the character data type and then back to the factor data type:

```{r}
for (i in factor_columns) {
  
  new_data[, i] <- as.character(new_data[, i])  
  new_data[is.na(new_data[, i]), i] <- "Bilge"
  new_data[, i] <- as.factor(new_data[, i]) 
}
```
