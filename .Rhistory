Votes = votes_cleaned
)
print(imdb_data)
View(imdb_data)
View(page)
View(imdb_data)
test_page <- read_html(combine_vector[1])
# Sayfa yapısını inceleyin
print(test_page %>% html_nodes("body") %>% html_text())
View(test_page)
Sys.setlocale("LC_ALL", "Turkish")
Sys.setlocale("LC_ALL", "Turkish")
test_page <- read_html(combine_vector[1])
# Sayfa yapısını inceleyin
print(test_page %>% html_nodes("body") %>% html_text())
View(test_page)
titles <- test_page %>%
html_nodes(".some-other-class a") %>%
html_text()
print(test_page %>% html_nodes("body") %>% html_text())
for (url in combine_vector) {
page <- read_html(url)
print(page)  # Sayfa içeriğini kontrol etmek için
titles <- c(titles, page %>% html_nodes(".lister-item-header a") %>% html_text())
print(titles)  # Çekilen başlıkları kontrol edin
}
for (url in combine_vector) {
page <- read_html(url)
print(page)  # Sayfa içeriğini kontrol etmek için
titles <- c(titles, page %>% html_nodes(".lister-item-header a") %>% html_text())
print(titles)  # Çekilen başlıkları kontrol edin
}
#URL's
URLS <- c("https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250" ,"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250")
#Scrapping
data_html <- read_html(URLS[1])
# extract titles (movie names)
title_names <- data_html |> html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# extract years
years <- data_html |> html_nodes('.sc-300a8231-7:nth-child(1)') |> html_text()
# extract durations
durations <- data_html |> html_nodes('.sc-300a8231-7:nth-child(2)') |> html_text()
durations <- sapply(durations, function(x) {
time_parts <- strsplit(x, "h|m")[[1]]
as.numeric(time_parts[1]) * 60 + as.numeric(time_parts[2])
})
#extract rating
ratings <- data_html |> html_nodes('.ipc-rating-star--rating') |> html_text()
#extract votes
votes <- data_html %>% html_nodes(".ipc-rating-star--voteCount") %>% html_text()
votes <- gsub("\\(|\\)| ", "", votes)
movies_data <- data.frame(
Title = title_names,
Year = years,
Duration = durations,
Rating = ratings,
Votes = votes,
stringsAsFactors = FALSE
)
rownames(movies_data) <- NULL
print(movies_data)
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
combine_vector <- c(url_1, url_2)
# Verilerin toplanacağı boş bir liste oluşturun
titles <- c()
years <- c()
durations <- c()
ratings <- c()
votes <- c()
# Döngü ile her bir URL'den veri çekme
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
titles <- c(titles, page %>%
html_nodes(".lister-item-header a") %>%
html_text())
# Yılları çekme
years <- c(years, page %>%
html_nodes(".lister-item-year") %>%
html_text())
# Süreleri çekme
durations <- c(durations, page %>%
html_nodes(".runtime") %>%
html_text())
# IMDb puanlarını çekme
ratings <- c(ratings, page %>%
html_nodes(".ratings-imdb-rating strong") %>%
html_text())
# Oy sayılarını çekme
votes <- c(votes, page %>%
html_nodes(".sort-num_votes-visible span:nth-child(2)") %>%
html_text())
}
# Süreleri temizleyip dakikaya çevirin
durations_cleaned <- str_replace(durations, " min", "") %>%
as.numeric()
# Oy sayılarını temizleyip sayıya çevirin
votes_cleaned <- str_replace_all(votes, ",", "") %>%
as.numeric()
# Yılları temizleyin
years_cleaned <- str_extract(years, "\\d{4}") %>%
as.numeric()
# IMDb puanlarını sayıya çevirin
ratings_cleaned <- as.numeric(ratings)
imdb_data <- tibble(
Title = titles,
Year = years_cleaned,
Duration = durations_cleaned,
Rating = ratings_cleaned,
Votes = votes_cleaned
)
print(imdb_data)
View(imdb_data)
View(imdb_data)
url_btw_2010_2023 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_before_2010 <- "https://www.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# Combine the URLs into a vector
url_vector <- c(url_btw_2010_2023, url_before_2010)
# Create empty vectors to store movie details
Title <- c()
Year <- c()
Duration <- c()
Rating <- c()
Votes <- c()  # Corrected variable name
# Loop through each URL and scrape data & read HTML content of the IMDb website
for (url in url_vector) {
website <- read_html(url)
# Extract movie Title
title_names <- website %>% html_nodes('.ipc-title__text') %>% html_text()
title_names <- tail(head(title_names, -1), -1)
title_names <- str_split(title_names, " ", n = 2)
title_names <- unlist(lapply(title_names, function(x) x[2]))
# Extract release year
year <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- website %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- website %>%
html_node(".sc-53c98e73-0.kRnqtn") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- website %>% html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata")
duration <- html_text(duration)
hour <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
as.numeric() %% 10
total_duration <- hour * 60 + str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
View(website)
View(page)
Sys.setlocale("LC_ALL", "Turkish")
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
combine_vector <- c(url_1, url_2)
# Verilerin toplanacağı boş bir liste oluşturun
titles <- c()
years <- c()
durations <- c()
ratings <- c()
votes <- c()
# Döngü ile her bir URL'den veri çekme
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
titles <- c(titles, page %>%
html_nodes('.ipc-title__text') %>%
html_text())
# Yılları çekme
years <- c(years, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# Süreleri çekme
durations <- c(durations, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# IMDb puanlarını çekme
ratings <- c(ratings, page %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text())
# Oy sayılarını çekme
votes <- c(votes, page %>%
html_nodes(".sc-53c98e73-0.kRnqtn") %>%
html_text())
}
# Süreleri temizleyip dakikaya çevirin
durations_cleaned <- str_replace(durations, " min", "") %>%
as.numeric()
# Oy sayılarını temizleyip sayıya çevirin
votes_cleaned <- str_replace_all(votes, ",", "") %>%
as.numeric()
# Yılları temizleyin
years_cleaned <- str_extract(years, "\\d{4}") %>%
as.numeric()
# IMDb puanlarını sayıya çevirin
ratings_cleaned <- as.numeric(ratings)
imdb_data <- tibble(
Title = titles,
Year = years_cleaned,
Duration = durations_cleaned,
Rating = ratings_cleaned,
Votes = votes_cleaned
)
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
combine_vector <- c(url_1, url_2)
titles <- c()
years <- c()
durations <- c()
ratings <- c()
votes <- c()
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
# extract titles (movie names)
title_names <- data_html |> html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
# extract titles (movie names)
title_names <- data_html |> html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Yılları çekme
years <- c(years, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# Süreleri çekme
durations <- c(durations, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# IMDb puanlarını çekme
ratings <- c(ratings, page %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text())
# Oy sayılarını çekme
votes <- c(votes, page %>%
html_nodes(".sc-53c98e73-0.kRnqtn") %>%
html_text())
}
# Süreleri temizleyip dakikaya çevirin
durations_cleaned <- str_replace(durations, " min", "") %>%
as.numeric()
# Oy sayılarını temizleyip sayıya çevirin
votes_cleaned <- str_replace_all(votes, ",", "") %>%
as.numeric()
# Yılları temizleyin
years_cleaned <- str_extract(years, "\\d{4}") %>%
as.numeric()
# IMDb puanlarını sayıya çevirin
ratings_cleaned <- as.numeric(ratings)
imdb_data <- tibble(
Title = titles,
Year = years_cleaned,
Duration = durations_cleaned,
Rating = ratings_cleaned,
Votes = votes_cleaned
)
print(imdb_data)
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
# extract titles (movie names)
title_names <- data_html |> html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Yılları çekme
years <- c(years, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# Süreleri çekme
durations <- c(durations, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# IMDb puanlarını çekme
ratings <- c(ratings, page %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text())
# Oy sayılarını çekme
votes <- c(votes, page %>%
html_nodes(".sc-53c98e73-0.kRnqtn") %>%
html_text())
}
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
# extract titles (movie names)
title_names <- page %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Yılları çekme
years <- c(years, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# Süreleri çekme
durations <- c(durations, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# IMDb puanlarını çekme
ratings <- c(ratings, page %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text())
# Oy sayılarını çekme
votes <- c(votes, page %>%
html_nodes(".sc-53c98e73-0.kRnqtn") %>%
html_text())
}
# Süreleri temizleyip dakikaya çevirin
durations_cleaned <- str_replace(durations, " min", "") %>%
as.numeric()
# Oy sayılarını temizleyip sayıya çevirin
votes_cleaned <- str_replace_all(votes, ",", "") %>%
as.numeric()
# Yılları temizleyin
years_cleaned <- str_extract(years, "\\d{4}") %>%
as.numeric()
# IMDb puanlarını sayıya çevirin
ratings_cleaned <- as.numeric(ratings)
imdb_data <- tibble(
Title = titles,
Year = years_cleaned,
Duration = durations_cleaned,
Rating = ratings_cleaned,
Votes = votes_cleaned
)
print(imdb_data)
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
# extract titles (movie names)
title_names <- page %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Yılları çekme
years <- c(years, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# Süreleri çekme
durations <- c(durations, page %>%
html_nodes(".sc-43986a27-7.dBkaPT.dli-title-metadata") %>%
html_text())
# IMDb puanlarını çekme
ratings <- c(ratings, page %>%
html_nodes(".ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating") %>%
html_text())
# Oy sayılarını çekme
votes <- c(votes, page %>%
html_nodes(".sc-53c98e73-0.kRnqtn") %>%
html_text())
}
# Süreleri temizleyip dakikaya çevirin
durations_cleaned <- str_replace(durations, " min", "") %>%
as.numeric()
# Oy sayılarını temizleyip sayıya çevirin
votes_cleaned <- str_replace_all(votes, ",", "") %>%
as.numeric()
# Yılları temizleyin
years_cleaned <- str_extract(years, "\\d{4}") %>%
as.numeric()
# IMDb puanlarını sayıya çevirin
ratings_cleaned <- as.numeric(ratings)
imdb_data <- tibble(
Title = title_names,
Year = years_cleaned,
Duration = durations_cleaned,
Rating = ratings_cleaned,
Votes = votes_cleaned
)
print(imdb_data)
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
combine_vector <- c(url_1, url_2)
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
combine_vector <- c(url_1, url_2)
titles <- c()
years <- c()
durations <- c()
ratings <- c()
votes <- c()
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
# extract titles (movie names)
title_names <- page %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Extract release year
year <- page %>% html_nodes('.sc-300a8231-7:nth-child(1)') %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- page %>%
html_nodes('.ipc-rating-star--rating') %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- page %>%
html_node(".ipc-rating-star--voteCount") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- page %>% html_nodes('.sc-300a8231-7:nth-child(2)')
duration <- html_text(duration)
hour <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
as.numeric() %% 10
total_duration <- hour * 60 + str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
movies <- data.frame(Title, Year, Duration, Rating, Votes)
print(head(movies))
library(tidyverse)
library(rvest)
library(stringr)
library(ggplot2)
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
combine_vector <- c(url_1, url_2)
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
combine_vector <- c(url_1, url_2)
url_1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250"
url_2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
combine_vector <- c(url_1, url_2)
titles <- c()
years <- c()
durations <- c()
ratings <- c()
votes <- c()
# Döngü ile her bir URL'den veri çekme
for (url in combine_vector) {
page <- read_html(url)
# Filmlerin isimlerini çekme
# extract titles (movie names)
title_names <- page %>% html_nodes('.ipc-title__text')
title_names <- html_text(title_names)
title_names <- tail(head(title_names,-1),-1)
title_names <- str_split(title_names, " ", n=2)
title_names <- unlist(lapply(title_names, function(x) {x[2]}))
# Extract release year
year <- page %>% html_nodes('.sc-300a8231-7:nth-child(1)') %>% html_text() %>% substr(1, 4) %>% as.numeric()
# Extract movie rating
rating <- page %>%
html_nodes('.ipc-rating-star--rating') %>%
html_text() %>%
substr(1, 3) %>%
as.numeric()
# Extract number of votes
vote <- page %>%
html_node(".ipc-rating-star--voteCount") %>%
html_text() %>%
parse_number()
# Extract number of duration
duration <- page %>% html_nodes('.sc-300a8231-7:nth-child(2)')
duration <- html_text(duration)
hour <- str_extract(duration, "\\d+h") %>%
str_replace("h", "") %>%
as.numeric() %% 10
total_duration <- hour * 60 + str_extract(duration, "\\d+m") %>%
str_replace("m", "") %>%
as.numeric()
# Append data to vectors
Title <- append(Title, title_names)
Year <- append(Year, year)
Rating <- append(Rating, rating)
Votes <- append(Votes, vote)  # Corrected variable name
Duration <- append(Duration, total_duration)
}
# Create a data frame from the scraped data
imdb_data <- data.frame(Title, Year, Duration, Rating, Votes)
print(head(imdb_data))
